from anytree import Node, RenderTree, LevelOrderIter, AsciiStyle, find


class MessageParser:

    def __init__(self):
        self.tree = None
        {% for topic in topics -%}
        self.addNode("{{ topic['topic'] }}",{{(topic['topic']).split("/") | length}})
        {%- if not loop.last%}
        {%endif -%}
        {%- endfor %}

    def addNode(self, topic, layer):
        if topic != "":
            topic_split = topic.split("/")
            if self.tree != None:
                _parent = find(
                    self.tree,
                    lambda node: node.name == topic_split[len(topic_split) - 2]
                    and node.layer == layer - 1,
                )
                Node(
                    topic_split[len(topic_split) - 1],
                    parent=_parent,
                    arg=None,
                    layer=layer,
                    function=None,
                )
            else:
                self.tree = Node(
                    topic_split[len(topic_split) - 1],
                    arg=None,
                    layer=layer,
                    function=None,
                )

    def findNode(self, variables, topic):
        topic_splitWithVariables = topic.split("/")
        _node = None
        matchV = matchD = matchT = False
        foundT = False

        for i in range(len(topic_splitWithVariables)):
            for node in LevelOrderIter(self.tree, maxlevel=i + 1):
                    if node.name == topic_splitWithVariables[i]:
                        _node = node
                    else:
                        if(node.name == "<vehicleId>"):
                            if(topic_splitWithVariables[i] in variables or "#" in variables):
                                #matchV
                                matchV = True
                        

                        if(node.name == "<deviceId>"):
                            if(topic_splitWithVariables[i] in variables or "#" in variables):
                                #matchV
                                matchD = True
                        
                        if(node.name == "<transactionId>"):
                            foundT = True
                            if(topic_splitWithVariables[i] in variables or "#" in variables):
                                #matchV
                                matchT = True
                    
        if(matchV and matchD):
            return _node
        elif(foundT and matchV and matchD and matchT):
            return _node
        else:
            return None


    def setMessageParse(self, topic, parse_function, argument):
        _node = self.findNode(["#","#","#"],topic) # ignore varibles
        if _node != None:
            _node.function = parse_function
            _node.arg = argument
    


    
    def parseMessage(self,variables, topic, payload):
        _node = self.findNode(variables,topic)
        if _node != None and _node.function != None and _node.arg != None:
            _node.function(payload, _node.arg)