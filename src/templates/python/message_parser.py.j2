from anytree import Node, RenderTree, LevelOrderIter, AsciiStyle, find


class MessageParser:

    def __init__(self):
        self.tree = None
        {% for topic in topics -%}
        self.addNode("{{ topic['topic'] }}",{{(topic['topic']).split("/") | length}})
        {%- if not loop.last%}
        {%endif -%}
        {%- endfor %}

    def addNode(self, topic, layer):
        if topic != "":
            topic_split = topic.split("/")
            if self.tree != None:
                _parent = find(
                    self.tree,
                    lambda node: node.name == topic_split[len(topic_split) - 2]
                    and node.layer == layer - 1,
                )
                Node(
                    topic_split[len(topic_split) - 1],
                    parent=_parent,
                    arg=None,
                    layer=layer,
                    function=None,
                )
            else:
                self.tree = Node(
                    topic_split[len(topic_split) - 1],
                    arg=None,
                    layer=layer,
                    function=None,
                )

    def findNode(self, variables, topic):
        topic_splitWithVariables = topic.split("/")
        _node = None
        matchV = matchD = matchT = False
        foundT = False

        for i, node in enumerate(LevelOrderIter(self.tree)):
            if i >= len(topic_splitWithVariables):
                break
            part = topic_splitWithVariables[i]

            if node.name == "<vehicleId>":
                if len(variables) > 0 and variables[0] == part:
                    matchV = True
                elif "#" in variables[0]:
                    matchV = True
            elif node.name == "<deviceId>":
                if len(variables) > 1 and variables[1] == part:
                    matchD = True
                elif "#" in variables[1]:
                    matchD = True
            elif node.name == "<transactionId>":
                foundT = True
                if len(variables) > 2 and variables[2] == part:
                    matchT = True
                elif "#" in variables[2]:
                    matchT = True
            elif node.name == part:
                _node = node

        if not foundT:
            return _node if matchV and matchD else None
        else:
            return _node if matchV and matchD and matchT else None

    def setMessageParse(self, topic, parse_function, argument):
        _node = self.findNode(["#","#","#"],topic) # ignore varibles
        if _node != None:
            _node.function = parse_function
            _node.arg = argument
    


    
    def parseMessage(self,variables, topic, payload):
        _node = self.findNode(variables,topic)
        if _node != None and _node.function != None and _node.arg != None:
            _node.function(payload, _node.arg)