from anytree import Node, RenderTree, LevelOrderIter, AsciiStyle, find


class MessageParser:

    def __init__(self):
        self.tree = None
        {% for topic in topics -%}
        self.addNode("{{ topic['topic'] }}",{{(topic['topic']).split("/") | length}})
        {%- if not loop.last%}
        {%endif -%}
        {%- endfor %}
        with open("topics_tree.txt", "w") as file:
            file.write(RenderTree(self.tree, style=AsciiStyle()).by_attr())

    def addNode(self, topic, layer):
        if topic != "":
            topic_split = topic.split("/")
            if self.tree != None:
                _parent = find(
                    self.tree,
                    lambda node: node.name == topic_split[len(topic_split) - 2]
                    and node.layer == layer - 1,
                )
                Node(
                    topic_split[len(topic_split) - 1],
                    parent=_parent,
                    arg=None,
                    layer=layer,
                    function=None,
                )
            else:
                self.tree = Node(
                    topic_split[len(topic_split) - 1],
                    arg=None,
                    layer=layer,
                    function=None,
                )

    def findNode(self, topic):
        if topic != "":
            topic_split = topic.split("/")
        topic_split[0] = "<vehicleId>"
        topic_split[1] = "<deviceId>"
        _topic_split = "/".join(topic_split)
        topic_split = _topic_split.split("/")
        _node = None
        match = [False] * len(topic_split)
        for i in range(len(topic_split)):
            for node in LevelOrderIter(self.tree, maxlevel=i + 1):
                if node.name == topic_split[i]:
                    print(node.name + "==" + topic_split[i])
                    _node = node
                    match[i] = True
        return _node

    def setMessageParse(self, topic, parse_function, argument):
        topic_split = topic.split("/")
        topic_split[0] = "<vehicleId>"
        topic_split[1] = "<deviceId>"
        _topic = "/".join(topic_split)
        _node = self.findNode(_topic)
        if _node != None:
            _node.function = parse_function
            _node.arg = argument

    def parseMessage(self, topic, payload):
        topic_split = topic.split("/")
        topic_split[0] = "<vehicleId>"
        topic_split[1] = "<deviceId>"
        _topic = "/".join(topic_split)
        _node = self.findNode(_topic)
        _node.function(payload, _node.arg)