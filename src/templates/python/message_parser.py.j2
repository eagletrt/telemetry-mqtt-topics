from anytree import Node, RenderTree, LevelOrderIter, AsciiStyle, find


class MessageParser:

    def __init__(self):
        self.tree = Node("<vehicleId>",layer=0, function=None)
        {% for topic in topics -%}
        self.addNode("{{ topic['topic'] }}", layer={{ topic['topic'].split("/") | length }})
        {%- if not loop.last%}
        {%endif -%}
        {%- endfor %}
        

    def addNode(self, topic, layer):
        if topic != "":
            topic_split = topic.split("/")
            print(topic_split[len(topic_split) - 1])
            _parent = find(
                self.tree,
                lambda node: node.name == topic_split[len(topic_split) - 2]
                and node.layer == layer - 1,
            )
            Node(
                topic_split[len(topic_split) - 1],
                parent=_parent,
                layer=layer,
                function=None,
            )
    //TODO fix
    def findNode(self, topic):
        if topic != "":
            topic_split = topic.split("/")
        _node = None
        for i in range(len(topic_split)):
            notFound = True
            for node in LevelOrderIter(self.tree, maxlevel=i + 1):
                if node.name == topic_split[i]:
                    _node = node
                    notFound = False
            if notFound:
                break

        return _node

    def setMessageParse(self, topic, parse_function,argument):
        topic_split = topic.split("/")
        topic_split[0] = "<vehicleId>"
        topic_split[1] = "<deviceId>"
        _topic = "/".join(topic_split)
        _node = self.findNode(_topic)
        if _node != None:
            _node.function = lambda payload: parse_function(payload,argument)

    def parseMessage(self, topic, payload):
        topic_split = topic.split("/")
        topic_split[0] = "<vehicleId>"
        topic_split[1] = "<deviceId>"
        _topic = "/".join(topic_split)
        _node = self.findNode(_topic)
        return _node.function(payload)
