#ifndef MESSAGE_PARSER_H
#define MESSAGE_PARSER_H

#include <functional>
#include <string>
#include <memory>
#include <unordered_map>

namespace MQTTTopics
{
class MessageParser
{
private:
    class TopicNode
    {
    public:
        TopicNode() = default;
        TopicNode(const TopicNode&) = default;
        TopicNode& operator=(const TopicNode&) = default;
        ~TopicNode() = default;

        std::unique_ptr<std::function<void(void*)>> parse;
        void* argument = nullptr;
        std::unordered_map<std::string, std::unique_ptr<TopicNode>> adjacent;
    };

public:
    MessageParser();
    MessageParser(const MessageParser&) = default;
    MessageParser& operator=(const MessageParser&) = default;
    ~MessageParser() = default;

    void setTopicParse(const std::string& topic, std::function<void(void*)> parse, void* argument = nullptr);
    void parseTopic(const std::string& topic);

private:
    void buildTree();
    void addTopic(std::unique_ptr<TopicNode>& node, const std::string& topic);
    std::unique_ptr<TopicNode>* findNode(std::unique_ptr<TopicNode>& node, const std::string& topic);

    std::unique_ptr<MessageParser::TopicNode> tree;
};
}

#endif