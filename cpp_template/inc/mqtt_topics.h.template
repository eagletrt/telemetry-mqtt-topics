#ifndef MQTT_TOPICS_H
#define MQTT_TOPICS_H

#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <vector>
#include <string>

#ifndef TOPIC_MAX_STR_LEN
#define TOPIC_MAX_STR_LEN 128
#endif


enum ROLES_T {<roles>
}; 

enum TOPICS_T {<topics>
};

typedef struct topic_t {
    std::string topic;
    int qos;
    bool retain;
}topic_t;

std::vector<topic_t> get_subscribe_topics(const enum ROLES_T role, const std::string vehicleId = "", const std::string deviceId = "", const std::string transactionId = "");
std::vector<topic_t> get_publish_topics(const enum ROLES_T role, const std::string vehicleId = "", const std::string deviceId = "", const std::string transactionId = "");

bool can_subscribe(const enum ROLES_T role, const enum TOPICS_T topic);
bool can_publish(const enum ROLES_T role, const enum TOPICS_T topic);

<build_functions>

#endif